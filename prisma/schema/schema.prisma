generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

model bill {
  bill_id          String             @id @db.VarChar
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  creator_id       BigInt             
  bill_date        DateTime           @db.Date
  seller_name      String             @db.VarChar
  seller_id        String             @db.VarChar
  material_info     String            @db.VarChar
  material_count    Float
  balance           Float             
  measurement_type measurement_units
  cost_without_tax  Decimal
  tax_cost          Decimal

  ggb_id            String            @db.VarChar
  return_eligible_transaction_type String            @db.VarChar
  deduction_kdv_period             String            @db.VarChar
  upload_kdv_period                String            @db.VarChar








  project_expenses project_expenses[]

  user user @relation(fields: [creator_id], references: [id])
}

model material {
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  measurement_unit measurement_units
  stock_code       String             @id @db.VarChar
  description      String             @db.VarChar
  balance          Float              @default(0.0)
  project_expenses project_expenses[]
}

model project_expenses {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  creator_id BigInt
  bill_date   DateTime @db.Date
  bill_id     String   @db.VarChar
  
  material_code                    String            @db.VarChar
  material_description             String            @db.VarChar
  material_count                   Decimal           @db.Decimal

  tax_cost                         Decimal           @db.Decimal
  goods_or_service_tax             Decimal           @db.Decimal
  expense_allocation_type_id       Int               @db.Integer
  
  total_cost   Decimal @db.Decimal
  total_weight Decimal @db.Decimal
  total_kdv    Decimal @db.Decimal

  project_id BigInt

  bill                    bill                    @relation(fields: [bill_id], references: [id], onDelete: NoAction)
  user                    user                    @relation(fields: [creator_id], references: [id], onDelete: SetNull)
  material                material                @relation(fields: [material_code], references: [stock_code], onDelete: NoAction)
  treyler_project         treyler_project         @relation(fields: [project_id], references: [id], onDelete: NoAction)
  expense_allocation_type expense_allocation_type @relation(fields: [expense_allocation_type_id], references: [id], onDelete: NoAction)
}

model expense_allocation_type {
  id               Int                @id @default(autoincrement())
  description      String             @db.VarChar
  project_expenses project_expenses[]
}

model treyler_project {
  id               BigInt             @id @default(autoincrement())
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  creator_id       BigInt
  treyler_type_id  BigInt
  name             String             @db.VarChar
  description      String             @db.VarChar
  customer_name    String             @db.VarChar
  budget           Decimal    @db.Decimal(15, 2) 
  total_expenses   Decimal    @db.Decimal(15, 2) 
  status           String             @db.VarChar
  end_date         DateTime           @db.Timestamptz(6)
  project_expenses project_expenses[]
  user             user               @relation(fields: [creator_id], references: [id], onDelete: SetNull)
  treyler_type     treyler_type       @relation(fields: [treyler_type_id], references: [id], onDelete: NoAction)
}

model treyler_type {
  id              BigInt            @id @default(autoincrement())
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  name            String            @db.VarChar
  description     String?           @db.Text
  image_data      String?           @db.Text        // For storing Base64 encoded image data
  image_content_type String?        @db.VarChar(50) // For storing MIME type (e.g., 'image/jpeg')
  treyler_project treyler_project[]
}

model user {
  id          BigInt   @id @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  username    String   @unique @db.VarChar
  password    String   @db.VarChar
  name        String   @db.VarChar
  surname     String   @db.VarChar
  email       String   @db.VarChar
  permissions Int[]
  roles       Int[]

  authorization_rank Int
  project_expenses   project_expenses[]
  treyler_project    treyler_project[]

  sentMessages     message[] @relation("sentMessages")
  receivedMessages message[] @relation("receivedMessages")
}

model permissions {
  id          Int    @id @default(autoincrement())
  name        String @unique @db.VarChar
  description String @db.VarChar
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model role {
  id          BigInt  @id @default(autoincrement())
  name        String? @unique @db.VarChar
  description String? @db.VarChar
  permissions Int[]
}

model message {
  id          Int         @id @default(autoincrement())
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isRead      Boolean     @default(false)
  message_type MessageType @default(text)
  metadata    Json?       // JSON field to store additional data for specialized messages
  
  // Relations
  sender      user        @relation("sentMessages", fields: [senderId], references: [id])
  senderId    BigInt      // Changed from Int to BigInt
  recipient   user        @relation("receivedMessages", fields: [recipientId], references: [id])
  recipientId BigInt      // Changed from Int to BigInt

  @@index([senderId])
  @@index([recipientId])
}

enum measurement_units {
  ADET
  KİLO
  METRE
  SET
  METREKÜP
  TAKIM
  TON
  PAKET
}

enum MessageType {
  text
  permission_request
  system
}